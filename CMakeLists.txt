# Copyright (c) 2007-2008 Hartmut Kaiser
# Copyright (c) 2007-2008 Chirag Dekate
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying 
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# We require at least CMake V2.6
cmake_minimum_required(VERSION 2.6)

# The name of our project is "hpx".  CMakeLists files in this project can
# refer to the root source directory of the project as ${hpx_SOURCE_DIR} and
# to the root binary directory of the project as ${hpx_BINARY_DIR}.
project (hpx CXX C)

# We need to use Boost, namely the following Boost libraries
set (Boost_COMPONENTS_NEEDED
    date_time 
    filesystem 
    graph 
    regex 
    serialization 
    thread 
    system 
    signals
)
find_package(Boost 1.36.0 COMPONENTS ${Boost_COMPONENTS_NEEDED})

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
LINK_DIRECTORIES(${Boost_LIBRARY_DIR})

# We need Intels Thread Building Blocks library as well
#find_package(TBB)

# We need to include the hpx directory for includes
include_directories (${hpx_SOURCE_DIR})
include_directories (${hpx_SOURCE_DIR}/external/coroutine)
include_directories (${hpx_SOURCE_DIR}/external/endian)
include_directories (${hpx_SOURCE_DIR}/external/exception)
include_directories (${hpx_SOURCE_DIR}/external/logging)
include_directories (${hpx_SOURCE_DIR}/external/lockfree)
include_directories (${hpx_SOURCE_DIR}/external/plugin)
include_directories (${hpx_SOURCE_DIR}/external/singleton)

if(MSVC)
    add_definitions(-D_WIN32_WINNT=0x0501)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_SCL_SECURE_NO_DEPRECATE)
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
endif(MSVC)

if(UNIX OR APPLE OR CYGWIN)
    add_definitions(-DHPX_GCC_HAVE_VISIBILITY)
endif(UNIX OR APPLE OR CYGWIN)

# the Boost serialization library needs to be linked as a shared library
add_definition(-DBOOST_SERIALIZATION_DYN_LINK)

# Recurse into some subdirectories. This does not actually cause another cmake 
# executable to run. The same process will walk through the project's entire 
# directory structure.
add_subdirectory (src)
add_subdirectory (tests)
add_subdirectory (examples)
add_subdirectory (runtime)

# Components are to build separately
add_subdirectory (hpx/components/accumulator)
add_subdirectory (hpx/components/simple_accumulator)
add_subdirectory (hpx/components/distributed_factory)

