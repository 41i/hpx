namespace hpx { namespace agas 
{

namespace tag { namespace database { struct PLACEHOLDER; }} 

namespace traits { namespace database
{

template <typename Key, typename Value>
struct map_type<tag::database::PLACEHOLDER, Key, Value>
{ typedef ... type; };

template <>
struct mutex_type<tag::database::PLACEHOLDER>
{ typedef ... type; };

template <>
struct name_hook<tag::database::PLACEHOLDER>
{
    typedef char const* result_type;

    static result_type call()
    { ... }
};

template <typename Key, typename Value>
struct connect_table_hook<tag::database::PLACEHOLDER, Key, Value>
{
    typedef typename
        map_type<tag::database::PLACEHOLDER, Key, Value>::type
    map_type;

    static void call(map_type& table, std::string const& name)
    { ... }
};

template <typename Key, typename Value>
struct disconnect_table_hook<tag::database::PLACEHOLDER, Key, Value>
{
    typedef typename
        map_type<tag::database::PLACEHOLDER, Key, Value>::type
    map_type;

    static void call(map_type& table)
    { ... }
};

}}}}

